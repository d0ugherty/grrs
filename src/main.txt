#![allow(unused)]
use clap::Parser;
use std::fs::File;
use std::fmt;
use std::io::BufReader;

/// Search for a pattern in a file and display the lines that contain it.
#[derive(Parser)]
struct Cli{
    //Pattern
    pattern: String,
    //Path of file to read
    path: std::path::PathBuf,
}

impl fmt::Display for Cli {
   fn fmt(&self, f: &mut fmt::Formatter) -> fmt:: Result {
        write!(f,"Looking for pattern {} in {}...", self.pattern, self.path.display())    
    }
}
fn main() {
    let args = Cli::parse();
    println!("{}",args);
    let file = File::open(&args.path).expect("Could not read file");
    let mut reader = BufReader::new(file);
    let lines = read_lines(file);

    for line in lines {
        if line.contains(&args.pattern){
            println!("{}", line);
        }
    }
}

fn read_lines<P>(filename: P) -> io::Result<io::Lines<io::BufReader<File>>>
where P: AsRef<Path>, {
    let file = File::open(filename)?;
    Ok(io::BufReader::new(file).lines())
}

